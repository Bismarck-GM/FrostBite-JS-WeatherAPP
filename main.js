(()=>{"use strict";const e={AF:"Afghanistan",AX:"Aland Islands",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua And Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia",BA:"Bosnia And Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",KH:"Cambodia",CM:"Cameroon",CA:"Canada",CV:"Cape Verde",KY:"Cayman Islands",CF:"Central African Republic",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CC:"Cocos (Keeling) Islands",CO:"Colombia",KM:"Comoros",CG:"Congo",CD:"Congo, Democratic Republic",CK:"Cook Islands",CR:"Costa Rica",CI:"Cote D'Ivoire",HR:"Croatia",CU:"Cuba",CY:"Cyprus",CZ:"Czech Republic",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",ET:"Ethiopia",FK:"Falkland Islands (Malvinas)",FO:"Faroe Islands",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories",GA:"Gabon",GM:"Gambia",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-Bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island & Mcdonald Islands",VA:"Holy See (Vatican City State)",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran, Islamic Republic Of",IQ:"Iraq",IE:"Ireland",IM:"Isle Of Man",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KR:"Korea",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libyan Arab Jamahiriya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MK:"Macedonia",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia, Federated States Of",MD:"Moldova",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands",AN:"Netherlands Antilles",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",MP:"Northern Mariana Islands",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestinian Territory, Occupied",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",RE:"Reunion",RO:"Romania",RU:"Russian Federation",RW:"Rwanda",BL:"Saint Barthelemy",SH:"Saint Helena",KN:"Saint Kitts And Nevis",LC:"Saint Lucia",MF:"Saint Martin",PM:"Saint Pierre And Miquelon",VC:"Saint Vincent And Grenadines",WS:"Samoa",SM:"San Marino",ST:"Sao Tome And Principe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia And Sandwich Isl.",ES:"Spain",LK:"Sri Lanka",SD:"Sudan",SR:"Suriname",SJ:"Svalbard And Jan Mayen",SZ:"Swaziland",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan",TJ:"Tajikistan",TZ:"Tanzania",TH:"Thailand",TL:"Timor-Leste",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad And Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks And Caicos Islands",TV:"Tuvalu",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates",GB:"United Kingdom",US:"United States",UM:"United States Outlying Islands",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VE:"Venezuela",VN:"Viet Nam",VG:"Virgin Islands, British",VI:"Virgin Islands, U.S.",WF:"Wallis And Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe"};function a(e){return Math.floor(e/10)}const n=function(n){const t=(e=>{const[{pressure:a,humidity:n,...t},i,r,o,{wind:s}]=[e.main,e.name,e.sys.country,e.weather[0],e];return{temperatures:t,pressure:a,humidity:n,cityName:i,countryCode:r,weather:o,wind:s}})(n);var i,r,o,s;return t.temperatures=function(e){const n={};return Object.keys(e).forEach((t=>{document.getElementById("switch-measurement").checked?n[t]=a(e[t]):n[t]=1.8*a(e[t])+32})),n}(t.temperatures),t.countryName=(s=t.countryCode,Object.prototype.hasOwnProperty.call(e,s)?e[s]:s),t.wind.speedText=(i=t.wind.speed,["< 1 Km/h","1-5 Km/h","6-11 Km/h","12-19 Km/h","20-28 Km/h","29-38 Km/h","39-49 Km/h","50-61 Km/h","62-74 Km/h","75-88 Km/h","89-102 Km/h","103-117 Km/h",">= 118 Km/h"][Math.round(i)]),t.wind.directionText=(r=t.wind.deg,(r+=22.5)<0?r=(360-Math.abs(r))%360:r%=360,["Northerly","North Easterly","Easterly","South Easterly","Southerly","South Westerly","Westerly","North Westerly"][parseInt(r/45,10)]),t.weather.description=(o=t.weather.description).charAt(0).toUpperCase()+o.slice(1),console.log(t),t};function t(e,a=""){const n=document.createElement(e);return""!==a&&(n.classList+=a),n}function i(){let e="";return e=document.getElementById("switch-measurement").checked?"C":"F",e}const r=async e=>{try{const a=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=49eaa4abf6e4f3d9db8f20bfed37ffca`),r=await a.json();(e=>{document.createElement("sup").innerText="°";const a=t("span","temp-type");a.innerText=i();const n=document.createElement("hr"),r=document.createElement("hr"),o=document.getElementById("main-container"),s=t("div","col-12 col-md-6 col-lg-4"),d=t("div","weather-card"),l=t("div","top"),c=t("div","wrapper"),u=t("h1","heading");u.innerText=""+e.weather.description;const m=t("h3","location");m.innerText=`${e.cityName}, ${e.countryName}`;const h=t("i","wi wi-owm-"+e.weather.id),p=t("p","temp"),S=t("span","temp-value");S.innerText=""+e.temperatures.temp;const M=t("span","deg");M.innerText="°",p.append(S,M,a);const T=t("table","table-temp"),y=t("tr"),A=t("th");A.innerText="Feels Like";const C=t("th");C.innerText="Max. Temp";const I=t("th");I.innerText="Min. Temp",y.append(A,C,I);const g=t("tr"),B=t("td");B.innerText=`${e.temperatures.feels_like} °${i()}`;const G=t("td");G.innerText=`${e.temperatures.temp_max} °${i()}`;const b=t("td");b.innerText=`${e.temperatures.temp_min} °${i()}`,g.append(B,G,b),T.append(y,g);const N=t("table","table-humidity"),w=t("tr"),E=t("th");E.innerText="Humidity";const K=t("th");K.innerText="Pressure",w.append(E,K);const L=t("tr"),P=t("td");P.innerText="% "+e.humidity;const R=t("td");R.innerText=e.pressure+" hPa",L.append(P,R),N.append(w,L);const F=t("h4");F.innerText="Wind";const x=t("i",`wi wi-wind from-${e.wind.deg}-deg`),f=t("table","table-wind"),v=t("tr"),U=t("th");U.innerText="From";const H=t("th");H.innerText="Speed",v.append(U,H);const O=t("tr"),D=t("td");D.innerText=""+e.wind.directionText;const k=t("td");k.innerText=""+e.wind.speedText,O.append(D,k),f.append(v,O),c.append(u,m,h,p,T,n,N,r,F,x,f),l.appendChild(c),d.appendChild(l),s.appendChild(d),o.appendChild(s)})(n(r))}catch(e){console.log(e)}return null};document.getElementById("form").addEventListener("submit",(e=>{((e,a,n="animate__")=>new Promise(((t,i)=>{const r=`${n}${a}`,o=document.querySelector(e);o.classList.add(n+"animated",r),o.addEventListener("animationend",(function(){o.classList.remove(n+"animated",r),t("Animation ended")}),{once:!0})})))("search-container","fadeOut").then((()=>{e.preventDefault();const a=document.getElementById("search-input");r(a.value),a.value="",document.getElementById("search-container").classList.add("d-none")}))})),document.getElementById("switch-measurement")})();